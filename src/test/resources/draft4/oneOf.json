[
  {
    "description": "oneOf",
    "schema": {
      "oneOf": [
        {
          "type": "integer"
        },
        {
          "minimum": 2
        }
      ]
    },
    "tests": [
      {
        "description": "first oneOf valid",
        "data": 1,
        "valid": true
      },
      {
        "description": "second oneOf valid",
        "data": 2.5,
        "valid": true
      },
      {
        "description": "both oneOf valid",
        "data": 3,
        "valid": false
      },
      {
        "description": "neither oneOf valid",
        "data": 1.5,
        "valid": false
      }
    ]
  },
  {
    "description": "oneOf with base schema",
    "schema": {
      "type": "string",
      "oneOf": [
        {
          "minLength": 2
        },
        {
          "maxLength": 4
        }
      ]
    },
    "tests": [
      {
        "description": "mismatch base schema",
        "data": 3,
        "valid": false
      },
      {
        "description": "one oneOf valid",
        "data": "foobar",
        "valid": true
      },
      {
        "description": "both oneOf valid",
        "data": "foo",
        "valid": false
      }
    ]
  },
  {
    "description": "oneOf with objects and type pattern",
    "schema": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "enum": [
                "TYPE_1"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "enum": [
                "TYPE_2"
              ]
            }
          }
        }
      ]
    },
    "tests": [
      {
        "description": "first oneOf valid",
        "data": {
          "type": "TYPE_1"
        },
        "valid": true
      },
      {
        "description": "second oneOf valid",
        "data": {
          "type": "TYPE_2"
        },
        "valid": true
      },
      {
        "description": "neither oneOf valid",
        "data": {
          "type": "INVALID_TYPE"
        },
        "valid": false
      }
    ]
  },
  {
    "description": "oneOf with objects and type pattern",
    "schema": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "color": {
              "type": "string"
            },
            "id": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "enum": [
                "TYPE_2"
              ]
            }
          }
        }
      ]
    },
    "tests": [
      {
        "description": "first oneOf valid",
        "data": {
          "color": "black",
          "id": "abc"
        },
        "valid": true
      },
      {
        "description": "second oneOf valid",
        "data": {
          "type": "TYPE_2"
        },
        "valid": true
      },
      {
        "description": "neither oneOf valid",
        "data": {
          "type": "INVALID_TYPE"
        },
        "valid": false
      },
      {
        "description": "first oneOf missing property but still valid",
        "data": {
          "id": "abc"
        },
        "valid": true
      }
    ]
  },
  {
    "description": "oneOf with objects and regex pattern",
    "schema": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "pattern": "^TYPE_1$"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "pattern": "^TYPE_2$"
            }
          }
        }
      ]
    },
    "tests": [
      {
        "description": "first oneOf valid",
        "data": {
          "type": "TYPE_1"
        },
        "valid": true
      },
      {
        "description": "second oneOf valid",
        "data": {
          "type": "TYPE_2"
        },
        "valid": true
      },
      {
        "description": "neither oneOf valid",
        "data": {
          "type": "INVALID_TYPE"
        },
        "valid": false
      }
    ]
  }
]
